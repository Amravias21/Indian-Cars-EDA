# -*- coding: utf-8 -*-
"""Week_6_INDIACARS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17JiRJGQqdofFm0cw_SYVC-7MfxvSPoBS

#**Indian Cars** : Exploratory Data Analysis

#**Import Necessary Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

"""#**Load the Dataset**
* `pd.read_csv("/content/drive/MyDrive/Internship Projects/Week-6/cars_ds_final.csv")`: Reads the CSV file named 'cars_ds_final.csv' into a Pandas DataFrame named 'df'.
"""

df = pd.read_csv('/content/drive/MyDrive/Internship Projects/Week-6/cars_ds_final.csv',index_col = 0)

"""# **Exploratory Data Analysis (EDA)**
- Exploratory Data Analysis (EDA) is an approach to analyzing datasets to summarize their main characteristics, often with visual methods. The primary goal of EDA is to understand the data's structure, uncover underlying patterns, identify relationships between variables, and detect anomalies or outliers. EDA plays a crucial role in the initial stages of data analysis and serves as a foundation for more advanced statistical modeling and hypothesis testing.

# **Univariate Analysis**:
- Univariate analysis is a statistical method used to analyze and understand the distribution, central tendency, and spread of a single variable in a dataset. It involves examining the characteristics and properties of one variable at a time, without considering relationships with other variables. Univariate analysis provides insights into the structure and behavior of individual variables and serves as the foundation for more complex analyses in data science and statistics.

## 1. **Understanding the dataset**
* Understanding a dataset involves gaining insight into the structure, content, and quality of the data before applying any analytical techniques or building models

* `df.shape`: This method returns a tuple representing the dimensions of the DataFrame. The tuple contains two elements:
>*   The first element represents the number of rows in the DataFrame.
>*   The second element represents the number of columns in the DataFrame.
"""

df.shape

"""* `df.head()`: This method is used to view the first few rows of a DataFrame. By default, it displays the first five rows, but you can specify the number of rows to display by passing an argument inside the parentheses."""

df.head()

"""* `df.isnull().sum()` returns the number of missing values (null or NaN values) in each column of a DataFrame."""

df.isnull().sum()

"""* `df.columns`: It is an attribute used to access the column labels of a DataFrame"""

df.columns

"""1. `df.columns.str.lower()`:

>* `df.columns` retrieves the column labels of the DataFrame as a pandas Index object.
* `.str.lower()` converts each column label to lowercase. This operation ensures consistency in the case of column names.

2. `.str.replace(' ','_')`:

>* `.str.replace()` is a string method that replaces occurrences of a specified substring with another substring.
* In this case, ' ' (a space) is replaced with '_' (an underscore). This operation replaces spaces in column names with underscores

3. `.str.replace('-', '_')`:

>* Similar to the previous operation, this replaces occurrences of '-' (hyphen) with '_' (underscore).
* This operation is useful for replacing hyphens with underscores, which is often done to maintain consistency and avoid issues with certain programming environments or libraries that don't support hyphens in variable names.

4. `df.columns =` ...:

>* Finally, the modified column labels are assigned back to the DataFrame's column labels. This updates the column names in the DataFrame with the modified versions.
"""

df.columns = df.columns.str.lower().str.replace('-','_')
df.columns

"""* The `.info()` method in pandas is used to display a concise summary of the DataFrame, including information about the data types, memory usage, and non-null values."""

df.info(verbose=True)

"""##2. **Data Cleaning:**
*  It is the process of detecting and correcting errors, inconsistencies, and inaccuracies in a dataset to improve its quality and usability for analysis or modeling. It involves several steps to identify and handle various issues that may exist within the data.

### Make
"""

df['make'].info()

"""* The code `df['make'].isnull().sum()` calculates the number of missing values (NaN or null values) in the 'make' column of the DataFrame (df)."""

df['make'].isnull().sum()

"""* `df['make'].value_counts()` is used to count the occurrences of each unique value in the 'make' column of the DataFrame (df)."""

df['make'].value_counts()

"""* `df['make'] = df['make'].replace('Maruti Suzuki R','Maruti Suzuki')` replaces any occurrence of the string '`Maruti Suzuki R`' in the '`make`' column of the DataFrame df with '`Maruti Suzuki`'. It's using the `replace()` function of pandas Series. So, if the '`make`' column contains values like '`Maruti Suzuki R`', they will be replaced with '`Maruti Suzuki'`.

* `df['make'] = df['make'].replace('Land Rover Rover','Land Rover')` replaces any occurrence of the string '`Land Rover Rover`' in the '`make`' column of the DataFrame df with '`Land Rover`'. Similar to the first line, it uses the `replace()` function to accomplish this task
"""

df['make'] = df['make'].replace('Maruti Suzuki R','Maruti Suzuki')
df['make'] = df['make'].replace('Land Rover Rover','Land Rover')

"""* `df['make'].value_counts()` is used to count the occurrences of each unique value in the 'make' column of the DataFrame (df).*italicised text*"""

df['make'].value_counts()

"""* `df[df['make'].isnull()]` filters the DataFrame df to include only the rows where the value in the '`make`' column is null. It uses boolean indexing to select rows where the condition `df['make'].isnull()` is `True`."""

df[df['make'].isnull()].sample(10)

"""By observing above model column, we can see that car make is included in model

`lambda x: x['model'] if pd.isna(x['make']) else x['make']`: This is a lambda function that takes a single argument x, which represents a row of the DataFrame.
* It checks if the value in the '`make`' column of the current row (`x['make']`) is null (missing) using `pd.isna()`. If it is null, it assigns the value from the 'model' column of the same row (`x['model']`) to the 'make' column. Otherwise, it keeps the existing value in the '`make`' column. This lambda function effectively replaces null values in the '`make`' column with values from the '`model`' column.
"""

df['make'] = df.apply(lambda x: x['model'] if pd.isna(x['make']) else x['make'], axis=1)

df['make'].isnull().sum()

df['make'].value_counts()

df['make'] = df['make'].str.lower().str.replace(' ','_').str.replace('-','_')

df.make.value_counts()

df['make'] = df['make'].apply(lambda x: 'mercedes_benz' if x[:5] == 'merce' else x)
df['make'] = df['make'].apply(lambda x: 'datsun' if x[:2] == 'go' else x)
df['make'] = df['make'].apply(lambda x: 'rolls_royce' if x[:5] == 'rolls' else x)

df.make.value_counts()

df['make'].info()

"""### Ex-Showroom Price"""

df['ex_showroom_price'] = df['ex_showroom_price'].apply(lambda x: x.replace('Rs.','')).apply(lambda x: x.replace(',',''))

df['ex_showroom_price'].astype('int')

df['ex_showroom_price'].isnull().sum()

df.sample()

df.dtypes

"""### Model"""

df['model'].sample(5)

df['model'] = df['model'].str.lower().str.replace(' ','_').str.replace('-','_')

df['model'].sample(5)

df[df['model'].str.contains('merce')].head(2)

df[df['model'].str.contains('rolls')].head(2)

df['model'] = df['model'].apply(lambda x: x.replace('mercedes_benz_','') if x[:5] == 'merce' else x)
df['model'] = df['model'].apply(lambda x: x.replace('rolls_royce_','') if x[:5] == 'rolls' else x)

df[df['model'].str.contains('merce')]

df[df['make'].str.contains('merce')].head(2)

df[df['make'].str.contains('rolls')].head(2)

"""### Displacement"""

df['displacement'].head()

df['displacement'].dtypes

df['displacement'] = df['displacement'].str.replace(' cc','')

df['displacement'].head()

df[df['displacement'].isnull()]

df['displacement'] = df.apply(lambda x: 3998 if x['make'] == 'mercedes_benz' and x['model'] == 'amg_gt_4_door_coupe' and x['variant'] == '63 S 4Matic+'  else x['displacement'], axis =1)

df[(df['make'] == 'mercedes_benz') & (df['model'] == 'amg_gt_4_door_coupe') & (df['variant'] == '63 S 4Matic+')]

df['displacement'].isnull().sum()

df['displacement'].fillna(np.nan)

#df['displacement'].astype(int)

"""### Variant"""

df['variant'].sample(5)

df['variant'] = df['variant'].str.lower().str.replace(' ','_').str.replace('+','_plus_')

df[df['variant'].str.contains('plus')]

df[df['variant'].str.contains('datsun')]

df['variant'] = df['variant'].apply(lambda x: x.replace('datsun_','') if x[:6] == 'datsun' else x)

df[df['variant'].str.contains('datsun')]

df[df['make'].str.contains('datsun')].sample(3)

df['variant'].dtypes

"""### Cylinders And Valves per Cylinder"""

df['cylinders'].dtypes

df['valves_per_cylinder'].dtypes

df['cylinders'].sample(5)

df['valves_per_cylinder'].sample(5)

df['cylinders'].isnull().sum()

df['valves_per_cylinder'].isnull().sum()

df[df['cylinders'].isnull()]

df[(df['make'] == 'hyundai') & df['cylinders'].isnull()]

df[(df['make'] == 'hyundai') & df['valves_per_cylinder'].isnull()]

df[df['cylinders'].isnull()].make.value_counts()

df[df['valves_per_cylinder'].isnull()].make.value_counts()

hv = ['e_1.2_petrol','s_1.2_petrol','s_1.2_amt_petrol','sx_1.2_petrol','sx_plus_1.2_amt_petrol','sx_(o)_1.2_petrol', 's_1.2_cng_petrol_(cng__plus_']
hu = ['sx_plus_1.0_petrol','s_1.2_diesel','s_1.2_amt_diesel','sx_plus_1.2_amt_diesel','sx_(o)_1.2_diesel']
hw = ['1.2_kappa_mt_e','1.0_turbo_gdi_mt_sx','1.0_turbo_gdi_dct_sx_plus']
for i in hv:
  df['cylinders'] = df.apply(lambda x: 4 if x['make'] == 'hyundai' and x['model'] == 'aura' and x['variant'] == i and (pd.isna(x['cylinders']))  else x['cylinders'], axis =1)
  df['valves_per_cylinder'] = df.apply(lambda x: 4 if x['make'] == 'hyundai' and x['model'] == 'aura' and x['variant'] == i and (pd.isna(x['valves_per_cylinder']))  else x['valves_per_cylinder'], axis =1)
for j in hu:
  df['cylinders'] = df.apply(lambda x: 3 if x['make'] == 'hyundai' and x['model'] == 'aura' and x['variant'] == j and (pd.isna(x['cylinders'])) else x['cylinders'], axis =1)
  df['valves_per_cylinder'] = df.apply(lambda x: 4 if x['make'] == 'hyundai' and x['model'] == 'aura' and x['variant'] == j and (pd.isna(x['valves_per_cylinder'])) else x['valves_per_cylinder'], axis =1)
for k in hw:
  df['valves_per_cylinder'] = df.apply(lambda x: 4 if x['make'] == 'hyundai' and x['model'] == 'venue' and x['variant'] == k and (pd.isna(x['valves_per_cylinder'])) else x['valves_per_cylinder'], axis =1)

df[(df['make'] == 'hyundai') & (df['variant'] == '1.0_turbo_gdi_dct_sx_plus')]

df[df['valves_per_cylinder'].isnull()].make.value_counts()

df[df['cylinders'].isnull()].make.value_counts()

df[(df['make'] == 'mahindra') & df['cylinders'].isnull()]

df[(df['make'] == 'mahindra') & df['valves_per_cylinder'].isnull()]

mu = ['1.2_w4','1.2_w6','1.2_w8','1.2_w8(o)']
mv = ['1.5_w8_(o)_amt','1.5_w8_amt','1.5_w8_(o)','1.5_w8','1.5_w6','1.5_w4']
model = ['marazzo','alturas_g4','xuv300']
for i in mv :
  df['cylinders'] = df.apply(lambda x: 4 if x['make'] == 'mahindra' and x['model'] == 'xuv300' and x['variant'] == i and (pd.isna(x['cylinders'])) else x['cylinders'], axis =1)
for j in mu:
  df['cylinders'] = df.apply(lambda x: 3 if x['make'] == 'mahindra' and x['model'] == 'xuv300' and x['variant'] == j and (pd.isna(x['cylinders'])) else x['cylinders'], axis =1)
for i in model:
  df['valves_per_cylinder'] = df.apply(lambda x: 4 if x['make'] == 'mahindra' and x['model'] == i and (pd.isna(x['valves_per_cylinder'])) else x['valves_per_cylinder'], axis =1)

df[df['valves_per_cylinder'].isnull()].make.value_counts()

df[df['cylinders'].isnull()].make.value_counts()

df[(df['make'] == 'kia') & df['cylinders'].isnull()]

df['cylinders'] = df.apply(lambda x: 4 if x['make']=='kia' and x['model'] == 'seltos' and (pd.isna(x['cylinders'])) else x['cylinders'], axis=1)
df['valves_per_cylinder'] = df.apply(lambda x: 4 if x['make']=='kia' and x['model'] == 'seltos' and (pd.isna(x['valves_per_cylinder'])) else x['valves_per_cylinder'], axis=1)

df[(df['make'] == 'nissan') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'nissan') & df['valves_per_cylinder'].isnull()] = df[(df['make'] == 'nissan') & df['valves_per_cylinder'].isnull()].fillna(4)

df[(df['make'] == 'nissan') & df['valves_per_cylinder'].isnull()]

df[df['valves_per_cylinder'].isnull()].make.value_counts()

df[(df['make'] == 'tata') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'tata') & (df['model'] == 'hexa')]

df['cylinders'] = df.apply(lambda x: 4 if x['make']=='tata' and x['model'] == 'hexa' and (pd.isna(x['cylinders'])) else x['cylinders'], axis=1)
df['valves_per_cylinder'] = df.apply(lambda x: 4 if x['make']=='tata' and (x['model'] == 'hexa' or x['model'] == 'winger') and (pd.isna(x['valves_per_cylinder'])) else x['valves_per_cylinder'], axis=1)

df[(df['make'] == 'tata') & (df['model'] == 'winger')]

df[(df['make'] == 'tata') & df['cylinders'].isnull()]

df[(df['make'] == 'toyota') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'toyota') & df['valves_per_cylinder'].isnull()] = df[(df['make'] == 'toyota') & df['valves_per_cylinder'].isnull()].fillna(4)

df[(df['make'] == 'mahindra') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'volkswagen') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'volkswagen') & df['cylinders'].isnull()]

df[(df['make'] == 'volkswagen') & df['valves_per_cylinder'].isnull()] = df[(df['make'] == 'volkswagen') & df['valves_per_cylinder'].isnull()].fillna(4)
df[(df['make'] == 'volkswagen') & df['cylinders'].isnull()] = df[(df['make'] == 'volkswagen') & df['cylinders'].isnull()].fillna(4)

df[(df['make'] == 'honda') & df['cylinders'].isnull()]

df[(df['make'] == 'honda') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'honda') & df['cylinders'].isnull()] = df[(df['make'] == 'honda') & df['cylinders'].isnull()].fillna(4)
df[(df['make'] == 'honda') & df['valves_per_cylinder'].isnull()] = df[(df['make'] == 'honda') & df['valves_per_cylinder'].isnull()].fillna(4)

df[(df['make'] == 'maserati') & df['cylinders'].isnull()]

df[(df['make'] == 'maserati') & df['cylinders'].isnull()] = df[(df['make'] == 'maserati') & df['cylinders'].isnull()].fillna(6)
df[(df['make'] == 'maserati') & df['valves_per_cylinder'].isnull()] = df[(df['make'] == 'maserati') & df['valves_per_cylinder'].isnull()].fillna(4)

df[(df['make'] == 'lexus') & df['cylinders'].isnull()]

df[(df['make'] == 'lexus') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'lexus') & df['cylinders'].isnull()] = df[(df['make'] == 'lexus') & df['cylinders'].isnull()].fillna(8)

df[df['cylinders'].isnull()].make.value_counts()

df[(df['make'] == 'bajaj') & df['cylinders'].isnull()] = df[(df['make'] == 'bajaj') & df['cylinders'].isnull()].fillna(1)

df[(df['make'] == 'jaguar') & df['cylinders'].isnull()]

df[(df['make'] == 'jaguar') & df['cylinders'].isnull()] = df[(df['make'] == 'jaguar') & df['cylinders'].isnull()].fillna(8)
df[(df['make'] == 'jaguar') & df['valves_per_cylinder'].isnull()] = df[(df['make'] == 'jaguar') & df['valves_per_cylinder'].isnull()].fillna(4)

df[df['valves_per_cylinder'].isnull()].make.value_counts()

df[(df['make'] == 'land_rover') & df['valves_per_cylinder'].isnull()]

df[(df['make'] == 'land_rover') & df['valves_per_cylinder'].isnull()] = df[(df['make'] == 'land_rover') & df['valves_per_cylinder'].isnull()].fillna(4)

df[df['valves_per_cylinder'].isnull()]

df[ df['valves_per_cylinder'].isnull()].make.unique()

df[((df['make'] == 'ford') | (df['make'] == 'jeep') )& df['valves_per_cylinder'].isnull()]

a = ['ford', 'jeep', 'renault','mercedes_benz', 'audi', 'ferrari']
for i in a:
  if i == 'ford':
    df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()] = df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()].fillna(4)
  elif i == 'jeep':
    df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()] = df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()].fillna(6)
  elif i == 'renault':
    df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()] = df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()].fillna(4)
  elif i == 'mercedes_benz':
    df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()] = df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()].fillna(4)
  elif i == 'audi':
    df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()] = df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()].fillna(4)
  else:
    df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()] = df[(df['make'] == str(i)) & df['valves_per_cylinder'].isnull()].fillna(12)

df[ df['valves_per_cylinder'].isnull()].make.value_counts()

df[ df['cylinders'].isnull()].make.value_counts()

"""From observation of Null values in Cylinders and Valves per cylinders, For `EV` Cars Cylinders and Valves per cylinders are not available.

* So if there is null values in both cylinders and valves per cylinders then we can easily conclude that the car is an `EV`

* The no of null values of cylinder and valves per cylinder column are matched/ same.

"""

df.describe()

df.isnull().sum()

null_counts = df.isnull().sum()

columns_with_many_nulls = null_counts[null_counts > 1000].index.tolist()

print(columns_with_many_nulls)

"""* As we can see the columns which has more than `1000` null values out of `1200` values, So we can exclude those columns.

The Most Required features to buy a car are `['make','model','variant','ex_showroom_price','body_type','displacement', 'cylinders','power','valves_per_cylinder','fuel_system', 'fuel_tank_capacity', 'fuel_type',  'city_mileage',  'seating_capacity','basic_warranty', 'child_safety_locks', 'number_of_airbags', 'parking_assistance',  'navigation_system']`
- So we only keep these columns and other columns are excluded for better analysis.
"""

df = df[['make','model','variant','ex_showroom_price','body_type','displacement', 'cylinders','power','valves_per_cylinder','fuel_system', 'fuel_tank_capacity', 'fuel_type',  'city_mileage',  'seating_capacity','basic_warranty', 'child_safety_locks', 'number_of_airbags', 'parking_assistance',  'navigation_system']]

pd.set_option('display.max_colwidth', None)
print(df['basic_warranty'].head(1))

"""###Basic Warranty"""

df['basic_warranty'].str.lower()

df['basic_warranty'] = df['basic_warranty'].str.lower()

df['basic_warranty'] = df['basic_warranty'].str.replace('(years/distance whichever comes first)','')
df['basic_warranty'] = df['basic_warranty'].str.replace('(whichever comes earlier)','')
df['basic_warranty'] = df['basic_warranty'].str.replace('(whichever comes first)','')

df['basic_warranty'].sample(5)

df[['basic_warranty_in_years', 'basic_warranty_in_distance']] = df['basic_warranty'].str.split('/', expand=True)

df.head()

df.drop(columns=['basic_warranty'], inplace=True)

df.head()

df['basic_warranty_in_distance'].isna().sum()

df['basic_warranty_in_years'].value_counts()

df[df['basic_warranty_in_years'] == '3 years 60000 kms']

df.loc[df['basic_warranty_in_years'] == '3 years 60000 kms', 'basic_warranty_in_distance'] = '60000'

df[df['basic_warranty_in_years'] == '3 years 60000 kms']

df['basic_warranty_in_years'] = df['basic_warranty_in_years'].str.extract('(\d+)')

df['basic_warranty_in_years'].value_counts()

df[df['basic_warranty_in_years'] == '24'].head()

df['basic_warranty_in_years'] = df['basic_warranty_in_years'].str.replace('24','2')

df['basic_warranty_in_years'].value_counts()

df['basic_warranty_in_distance'].value_counts()

df['basic_warranty_in_distance'] = df['basic_warranty_in_distance'].str.replace(',','')

df.loc[df['basic_warranty_in_distance'] == '1.6l kmbattery warranty', 'basic_warranty_in_distance'] = '160000'
df.loc[df['basic_warranty_in_distance'] == '1 lakh kms (whichever is earlier)', 'basic_warranty_in_distance'] = '100000'
df['basic_warranty_in_distance'] = df['basic_warranty_in_distance'].str.strip().replace('unlimited kms','2222')

df['basic_warranty_in_distance'].value_counts()

df['basic_warranty_in_distance'] = df['basic_warranty_in_distance'].str.extract('(\d+)')

df['basic_warranty_in_distance'].value_counts()

df['basic_warranty_in_distance'] = df['basic_warranty_in_distance'].str.replace('2222','unlimited')

df['basic_warranty_in_distance'].value_counts()

df.head()

df.shape

df['basic_warranty_in_distance'].isna().sum()

df['basic_warranty_in_years'].isnull().sum()

df[df['basic_warranty_in_distance'].isnull()]

df[df['basic_warranty_in_distance'].isnull()].make.value_counts()

df[df['basic_warranty_in_years'].isnull() & (df['make'] == 'aston_martin')].model.value_counts()

df['basic_warranty_in_years'].isnull().sum()

df['basic_warranty_in_years']

df[ df['basic_warranty_in_years'].str.len()> 3]

warranty_mapping = { ('hyundai', 'santro'): 2,('hyundai', 'creta'): 3,('hyundai', 'venue'): 3,('hyundai', 'aura'): 3,('hyundai', 'tucson'): 3,('hyundai', 'verna'): 2, ('hyundai', 'xcent_prime'): 3,('hyundai', 'elantra'): 3,
    ('hyundai', 'xcent'): 2,('hyundai', 'grand_i10_prime'): 2,('hyundai', 'kona_electric'): 3,('tata', 'nexon'): 3,('tata', 'altroz'): 3,('tata', 'hexa'): 3,('tata', 'tiago'): 2,('tata', 'tigor'): 2,('tata', 'tigor_ev'): 3,('tata', 'bolt'): 2,
    ('tata', 'winger'): 2,('maruti_suzuki', 's_presso'): 2,('maruti_suzuki', 'vitara_brezza'): 2,('maruti_suzuki', 'xl6'): 2,('maruti_suzuki', 's_cross'): 3,('maruti_suzuki', 'alto_k10'): 2,
    ('maruti_suzuki', 'alto'): 2,('maruti_suzuki', 'alto_800_tour'): 2, ('jeep', 'compass'): 3, ('jeep', 'compass_trailhawk'): 3, ('jeep', 'grand_cherokee'): 2, ('mahindra', 'xuv300'): 3,
    ('mahindra', 'nuvosport'): 3,('mahindra', 'alturas_g4'): 3, ('mahindra', 'scorpio'): 2, ('kia', 'seltos'): 3,('toyota', 'yaris'): 3,('toyota', 'glanza'): 3,
    ('toyota', 'platinum_etios'): 3,('volvo', 'xc90'): 4,('volvo', 'xc40'): 2,('volvo', 'v40'): 2,('volvo', 'v40_cross_country'): 2,('volvo', 's60'): 2,('volvo', 's90'): 4,('volvo', 's60_cross_country'): 2,
    ('volvo', 'xc60'): 2,('volvo', 'v90_cross_country'): 2,('mercedes_benz', 'v_class'): 3,('mercedes_benz', 'amg_gt'): 3,('mercedes_benz', 'maybach'): 3,
    ('mercedes_benz', 'gle'): 3,('mercedes_benz', 'glc'): 3,('mercedes_benz', 'e_class_cabriolet'): 3,('mercedes_benz', 's_class_cabriolet'): 3,('mercedes_benz', 'c_class_cabriolet'): 3,
    ('mercedes_benz', 'amg_gt_4_door_coupe'): 3,('mercedes_benz', 'cls'): 3,('bmw', '6_series'): 4,('bmw', '7_series'): 2,('bmw', '3_series'): 4,('bmw', 'x4'): 2,('bmw', 'z4_roadster'): 4,
    ('bmw', 'x7'): 4,('renault', 'triber'): 4,('mg', 'zs_ev'): 5,('honda', 'civic'): 3,('honda', 'cr_v'): 5,('honda', 'amaze'): 5,('volkswagen', 'ameo'): 4,('volkswagen', 'taigun'): 4,
    ('lexus', 'ls_500h'): 3, ('lexus', 'nx_300h'): 3, ('lexus', 'rx_450h'): 4, ('lexus', 'lc_500h'): 4, ('lexus', 'lx_450h'): 4,  ('lexus', 'es'): 3, ('lexus', 'lx_570h'): 3,
    ('audi', 'a4'): 3, ('audi', 'a6'): 3, ('audi', 'a3_cabriolet'): 3, ('audi', 'r8'): 3, ('audi', 'a5_cabriolet'): 3, ('audi', 'a5'): 3,
    ('jaguar', 'xe'): 3, ('jaguar', 'f_type'): 3, ('jaguar', 'f_pace'): 3,('porsche', '718'): 4, ('porsche', 'cayenne_coupe'): 4,('nissan', 'gtr'): 3,('fiat', 'urban_cross'): 3, ('fiat', 'abarth_avventura'): 3, ('fiat', 'punto_evo_pure'): 3, ('fiat', 'abarth_punto'): 3,('ferrari', '488_gtb'): 3, ('ferrari', 'gtc4_lusso'): 3, ('ferrari', 'portofino'): 3, ('ferrari', '812_superfast'): 3, ('ferrari', '458_spider'): 3,
    ('maserati', 'levante'): 3, ('maserati', 'granturismo'): 3, ('maserati', 'quattroporte'): 4, ('maserati', 'grancabrio'): 3,('skoda', 'superb'): 4, ('skoda', 'superb_sportline'): 4, ('skoda', 'kodiaq_scout'): 4,('ford', 'aspire'): 5, ('ford', 'endeavour'): 3,
    ('land_rover', 'range_sport'): 3, ('land_rover', 'range'): 3, ('force', 'gurkha'): 3, ('mitsubishi', 'outlander'): 5, ('mitsubishi', 'montero'): 3, ('bugatti', 'chiron'): 4, ('rolls_royce', 'wraith'): 4, ('rolls_royce', 'cullinan'): 4,
    ('lamborghini', 'urus'): 3, ('mini', 'clubman'): 4, ('mini', 'john_cooper_works'): 3, ('bentley', 'bentayga'): 3, ('aston_martin', 'db_11'): 3
}

for index, row in df.iterrows():
    make = row['make']
    model = row['model']
    if pd.isnull(row['basic_warranty_in_years']):
        if (make, model) in warranty_mapping:
            df.at[index, 'basic_warranty_in_years'] = warranty_mapping[(make, model)]

df['basic_warranty_in_years'].isnull().sum()

df['basic_warranty_in_years'] = df['basic_warranty_in_years'].fillna(2)

df['basic_warranty_in_years'].isnull().sum()

df['basic_warranty_in_years'].astype(int)

df[df['basic_warranty_in_distance'].isnull()].make.value_counts()

df['basic_warranty_in_distance'].isnull().sum()

"""###Body Type"""

df['body_type'].head()

df['body_type'].tail()

df['body_type'].isnull().sum()

df['body_type'] = df['body_type'].str.lower()

df['body_type'].sample(5)

df['body_type'].value_counts()

df['body_type'] = df['body_type'].str.replace('suv, crossover','crossover, suv').str.replace(', ','_')

df['body_type'] = df['body_type'].str.replace('crossover_suv','suv')

df['body_type'].value_counts()

df[df['body_type'] == 'sedan_crossover']

df[df['body_type'].isnull()]

df['body_type'].value_counts()

body_mapping = { ('mahindra','alturas_g4'):'suv',('maserati','ghibli'): 'sedan', ('porsche','cayenne_coupe'):'coupe' }

for index, row in df.iterrows():
    make = row['make']
    model = row['model']
    if pd.isnull(row['body_type']):
        if (make, model) in body_mapping:
            df.at[index, 'body_type'] = body_mapping[(make, model)]

df['body_type'].isnull().sum()

"""###seating capacity"""

df['seating_capacity'].isnull().sum()

df[df['seating_capacity'].isnull()]

seating_mapping = { ('mahindra','alturas_g4'): 7,('renault','lodgy'):8, ('porsche','cayenne_coupe'):4 }

for index, row in df.iterrows():
    make = row['make']
    model = row['model']
    if pd.isnull(row['seating_capacity']):
        if (make, model) in seating_mapping:
            df.at[index, 'seating_capacity'] = seating_mapping[(make, model)]

df['seating_capacity'].isnull().sum()

"""###Fuel system"""

df['fuel_system'].head()

df['fuel_system'] = df['fuel_system'].str.lower().str.replace(' - ','_')

df['fuel_system'].value_counts()

df['fuel_system'].isna().sum()

df[df['fuel_system'].isna()]

fuelsystem_array = df[df['fuel_system'].isna()].make.values

fuelsystem_array

for i in fuelsystem_array:
    if i in ['land_rover', 'mitsubishi', 'jaguar']:
        mask = df['fuel_system'].isna() & (df['make'] == i)
        df.loc[mask, 'fuel_system'] = 'injection'
    else:
        mask = df['fuel_system'].isna() & (df['make'] == i)
        df.loc[mask, 'fuel_system'] = 'electric'

df['fuel_system'].isna().sum()

df['fuel_system'].value_counts()

"""### Fuel Tank Capacity"""

df['fuel_tank_capacity'].head()

df['fuel_tank_capacity'].value_counts()

df['fuel_tank_capacity'] = df['fuel_tank_capacity'].str.replace('60.9 litres','61')

df['fuel_tank_capacity'] = df['fuel_tank_capacity'].str.extract('(\d+)')

df['fuel_tank_capacity'].value_counts()

df['fuel_tank_capacity'].isnull().sum()

df[df['fuel_tank_capacity'].isnull()].make.value_counts()

df[df['fuel_tank_capacity'].isnull() & (df['make'] == 'land_rover')]

# Convert 'fuel_tank_capacity' to numeric, coerce errors to NaN
df['fuel_tank_capacity'] = pd.to_numeric(df['fuel_tank_capacity'], errors='coerce')

# Group by 'make' and calculate the mode fuel tank capacity for each make
mode_capacity_by_make = df.groupby('make')['fuel_tank_capacity'].apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None)

# Fill missing values based on mode capacity for each make
def fill_missing_capacity(row):
    if pd.isnull(row['fuel_tank_capacity']):
        return mode_capacity_by_make.get(row['make'], None)
    else:
        return row['fuel_tank_capacity']

df['fuel_tank_capacity'] = df.apply(fill_missing_capacity, axis=1)

df['fuel_tank_capacity'].isnull().sum()

df[df['fuel_tank_capacity'].isnull()]

fueltank_array = df[df['fuel_tank_capacity'].isnull()].make.unique()

ft_mapping = { ('mg','hector'):60, ('bajaj','qute_(re60)'):35, ('bugatti','chiron'):100,('mg', 'zs_ev'):0}

for index, row in df.iterrows():
    make = row['make']
    model = row['model']
    if pd.isnull(row['fuel_tank_capacity']):
        if (make, model) in ft_mapping:
            df.at[index, 'fuel_tank_capacity'] = ft_mapping[(make, model)]

df['fuel_tank_capacity'].isnull().sum()

"""###Fuel Type"""

df['fuel_type'].head()

df['fuel_type'].value_counts()

df['fuel_type'] = df['fuel_type'].str.lower().str.replace(' + ','_plus_')

df['fuel_type'].value_counts()

df['fuel_type'].isnull().sum()

"""### City Mileage"""

df.head()

df['city_mileage'].head()

df['city_mileage'].value_counts()

df['city_mileage'] = df['city_mileage'].str.replace('?','').str.replace(' km/litre','')

df[(df['make'] == 'audi') & (df['model'] == 'a5')]

df['city_mileage'].value_counts()

df['city_mileage'].isnull().sum()

df['city_mileage'] = df['city_mileage'].str.replace(',','.')
df['city_mileage'] = df['city_mileage'].str.replace('12.5-12.7','12.6')
df['city_mileage'] = df['city_mileage'].str.replace('26032','26.32')

df['city_mileage'].unique()

df['city_mileage'] = df['city_mileage'].astype(float)

df['city_mileage'] = df['city_mileage'].fillna(df.groupby('make')['city_mileage'].transform('mean'))

df['city_mileage'].isnull().sum()

avg = df['city_mileage'].mean()

avg

df['city_mileage'] = df['city_mileage'].fillna(avg)

df['city_mileage'].isnull().sum()

"""### Number of airbags"""

df['number_of_airbags'].head()

df['number_of_airbags'].value_counts()

df['number_of_airbags'].isnull().sum()

df[df['number_of_airbags'].isnull()].make.value_counts()

airbags_array = df[df['number_of_airbags'].isnull()].make.values

for i in airbags_array:
    if i in ['mercedes_benz','land_rover']:
        mask = df['number_of_airbags'].isna() & (df['make'] == i)
        df.loc[mask, 'number_of_airbags'] = 6
    elif i == 'rolls_royce':
        mask = df['number_of_airbags'].isna() & (df['make'] == i)
        df.loc[mask, 'number_of_airbags'] = 8
    else:
      mask = df['number_of_airbags'].isna() & (df['make'] == i)
      df.loc[mask, 'number_of_airbags'] = 2

df[df['number_of_airbags'].isnull() & (df['make'] == 'rolls_royce')]

df['number_of_airbags'].isnull().sum()

"""### Parking Assistance"""

df['parking_assistance'].head()

df['parking_assistance'].value_counts()

df['parking_assistance'] = df['parking_assistance'].str.replace('Rear sensors, Rear sensors with camera','Rear sensors with camera').str.replace('Rear sensors with camera, Rear sensors','Rear sensors with camera')

df['parking_assistance'] = df['parking_assistance'].str.replace('Rear sensors, Front sensors','Front sensors, Rear sensors')

df['parking_assistance'].value_counts()

df['parking_assistance'].isnull().sum()

df[df['parking_assistance'].isnull()]



"""### Navigation System"""

df['navigation_system'].tail()

df['navigation_system'].value_counts()

df['navigation_system'].isnull().sum()

df['navigation_system'] = df['navigation_system'].str.lower()

df[df['navigation_system'].isnull()].make.value_counts()

df[df['navigation_system'].isnull() & (df['make'] == 'hyundai')]

df['navigation_system'] = df['navigation_system'].fillna('no')

df['navigation_system'].isnull().sum()

"""###Child Lock Safety System"""

df['child_safety_locks'].head()

df['child_safety_locks'].value_counts()

df['child_safety_locks'].isnull().sum()

df['child_safety_locks'] = df['child_safety_locks'].str.lower()

df['child_safety_locks'].isnull().sum()

df[df['child_safety_locks'].isnull()]

df['child_safety_locks'] = df['child_safety_locks'].fillna('yes')

"""## 3. Data Types"""

df.dtypes

df['ex_showroom_price'] = df['ex_showroom_price'].astype(int)

df['displacement'] = df['displacement'].astype(float)

df['fuel_tank_capacity'] = df['fuel_tank_capacity'].astype(int)

df['basic_warranty_in_years'] = df['basic_warranty_in_years'].astype(int)

"""##4. Descriptive Statistics :
- `df.describe()` is a method in pandas that generates descriptive statistics of the numerical variables in a DataFrame. It provides summary statistics such as count, mean, standard deviation, minimum, quartiles, and maximum for each numerical column in the DataFrame.
"""

df.describe()

"""## 5. **Histograms:**
- A Histplot is a type of histogram plot that visualizes the distribution of a single numerical variable. It provides a graphical representation of the frequency or count of observations within different bins or intervals of the variable's values.
"""

numeric_cols = ['ex_showroom_price', 'displacement', 'fuel_tank_capacity',
                'city_mileage', 'seating_capacity', 'basic_warranty_in_years',
                ]

# Define the dimensions of the subplot grid
num_rows = 3
num_cols = 2

# Create subplots
fig, axes = plt.subplots(num_rows, num_cols, figsize=(16, 20))

# Flatten the axes array to iterate over it
axes = axes.flatten()

for i, col in enumerate(numeric_cols):
    sns.histplot(data=df[col].dropna(), kde=True, ax=axes[i],palette="Set2")
    axes[i].set_title(f'Histogram of {col}')
    axes[i].set_xlabel(col)
    axes[i].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

"""##6. Bar Charts:
- Bar charts are a type of graphical representation that display categorical data with rectangular bars. Each bar represents a category, and the length or height of the bar corresponds to the frequency, count, proportion, or value associated with that category. Bar charts are widely used for visualizing categorical data and comparing the values of different categories.

Which car makes has most no of cars sold?
"""

# Calculate counts for each make
make_counts = df['make'].value_counts()

# Sort the makes based on their counts in descending order
sorted_makes = make_counts.index.tolist()

# Create countplot with sorted order
plt.figure(figsize=(12, 6))
ax = sns.countplot(data=df, x='make', order=sorted_makes, palette= 'Set1')

# Annotate each bar with its count
for p in ax.patches:
    ax.annotate(format(p.get_height(), '.0f'),
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 9),
                textcoords='offset points')

plt.xticks(rotation=90)
plt.xlabel('Make')
plt.ylabel('Count')
plt.title('Most cars sold by Maker')
plt.show()

"""What kind of body type cars are sold most?"""

plt.figure(figsize=(12, 6))
type_counts = df['body_type'].value_counts()
sorted_type = type_counts.index.tolist()
ax = sns.countplot(data=df, y=df['body_type'],order=sorted_type,palette="Set2")
for p in ax.patches:
    ax.annotate(format(p.get_width(), '.0f'),
                (p.get_width(), p.get_y() + p.get_height() / 2.),
                ha = 'center', va = 'center',
                xytext = (9, 0),
                textcoords = 'offset points')

plt.xlabel('Count')
plt.ylabel('Body Type')
plt.title('No of cars sold by Body Type')
plt.show()

"""##7. Pie Charts:
- Pie charts are a type of circular statistical graphic that is divided into slices to illustrate numerical proportions. Each slice represents a proportionate part of the whole, and the size of each slice is proportional to the quantity it represents. Pie charts are commonly used to show the composition of a categorical variable as a part of a whole.

Most no of Vehicles sold uses Fuel Type?:
"""

plt.figure(figsize=(8, 8))
ft_counts = df['fuel_type'].value_counts()

plt.pie(ft_counts, labels=ft_counts.index, autopct='%1.1f%%', startangle=140)

plt.title('Most no of Vehicles sold uses Fuel Type?')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle

plt.show()

"""##8. Count Plots:
-
Count plots are a type of categorical plot in seaborn, a Python data visualization library built on top of matplotlib. Count plots are used to visualize the count or frequency of observations in each category of a categorical variable. They are particularly useful for understanding the distribution of categorical data and comparing the frequency of different categories.

No of vehicles has Navigation System
"""

plt.figure(figsize=(12, 6))
ax = sns.countplot(data=df, x=df['navigation_system'],palette="Set2")
for p in ax.patches:
    ax.annotate(format(p.get_height(), '.0f'),
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha = 'center', va = 'center',
                xytext = (0, 9),
                textcoords = 'offset points')

plt.xticks(rotation=90)
plt.xlabel('navigation_system')
plt.ylabel('Count')
plt.title('No of vehicles has navigation_system')
plt.show()

"""# **Bivariate Analysis** :
- Bivariate analysis is used in data analysis to understand the relationship between two variables. It helps in uncovering patterns, trends, correlations, and associations between the variables.

**3D scatter plot**
- A 3D scatter plot is an extension of the 2D scatter plot where three variables are plotted along the x, y, and z axes. It allows for the visualization of relationships between three variables simultaneously, providing insights that may not be easily discernible from 2D scatter plots.
"""

import plotly.express as px
fig = px.scatter_3d(df, x='displacement', z='ex_showroom_price', y='fuel_type',color='make',width=1000,height=750)
fig.update_layout(showlegend=True)
fig.show();

"""**Pair Plot**
- A pair plot, also known as a scatterplot matrix, is a grid of scatterplots that allows you to visualize the pairwise relationships between multiple variables in a dataset. It displays scatterplots for each pair of variables along the diagonal and scatterplots or other visualizations (such as kernel density plots or histograms) for the off-diagonal pairs. Pair plots are particularly useful for identifying patterns, trends, and correlations in multivariate data
"""

sns.pairplot(df)
plt.show()

"""**Correlation matrix**
- A correlation matrix is a tabular representation of correlation coefficients between variables in a dataset. It provides a concise summary of the relationships between pairs of variables, helping to identify patterns, dependencies, and associations among the variables.
"""

correlation_matrix = df[numeric_cols].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

"""Which Car has Highest no of seats?"""

plt.figure(figsize=(12, 6))
sns.lineplot(data=df, x='make', y='seating_capacity')
plt.xticks(rotation=90)
plt.xlabel('Make')
plt.ylabel('Seating Capacity')
plt.title('Seating Capacity Distribution by Make')
plt.grid(True)
plt.show()

"""Which maker produces most affordable cars?"""

plt.figure(figsize=(12, 6))
sns.scatterplot(data=df, x='make', y='ex_showroom_price')
plt.xticks(rotation=90)
plt.xlabel('Make')
plt.ylabel('Ex Showroom Price')
plt.title('Ex Showroom Price by Make')
plt.grid(True)
plt.show()

"""Which car make has Highest fuel tank capacty?"""

mean_fuel_capacity = df.groupby('make')['fuel_tank_capacity'].mean().sort_values(ascending=False)

# Plotting the bar plot
plt.figure(figsize=(12, 6))
sns.barplot(x=mean_fuel_capacity.index, y=mean_fuel_capacity.values)
plt.xticks(rotation=90)
plt.xlabel('Make')
plt.ylabel('Mean Fuel Tank Capacity')
plt.title('Mean Fuel Tank Capacity by Make')
plt.show()

"""Which car make has reater mileage?"""

plt.figure(figsize=(12, 6))
mean_mileage = df.groupby('make')['city_mileage'].mean().sort_values(ascending=False)
sns.barplot(x=mean_mileage.index, y=mean_mileage.values,palette='Set2')
plt.xticks(rotation=90)
plt.xlabel('Make')
plt.ylabel('Mean City Mileage')
plt.title('Mean City Mileage by Make')
plt.show()

"""As most of the cars uses Petrol(fuel type)
- Which car make produces most no of cars with fuel type as petrol?
"""

petrol_df = df[df['fuel_type'] == 'petrol']

plt.figure(figsize=(12, 6))
sns.countplot(data=petrol_df, x='make')
plt.xticks(rotation=90)
plt.xlabel('Make')
plt.ylabel('Count')
plt.title('Count of Vehicles with Petrol Fuel Type by Make')
plt.show()

"""As second most of the cars uses Diesel(fuel type)
- Which car make produces most no of cars with fuel type as Diesel?
"""

diesel_df = df[df['fuel_type'] == 'diesel']

plt.figure(figsize=(12, 6))
sns.countplot(data=diesel_df, x='make')
plt.xticks(rotation=90)
plt.xlabel('Make')
plt.ylabel('Count')
plt.title('Count of Vehicles with Diesel Fuel Type by Make')
plt.show()

"""# **Overall Findings and Conclusions:**

* The majority of cars sold are made by Maruti Suzuki, Hyundai, and Mahindra.
* The most popular body type is SUV, followed by sedan.
* Petrol is the most common fuel type, followed by diesel.
* The majority of vehicles do not have a navigation system.
* There is a positive correlation between fuel tank capacity and ex-showroom price.
* There is a negative correlation between seating capacity and ex-showroom price.
* Maruti Suzuki produces the most affordable cars.
* Bugatti has the highest fuel tank capacity.
* Maruti Suzuki has the highest city mileage.
* Maruti Suzuki produces the most petrol-powered cars.
* Mahindra produces the most diesel-powered cars.

**Conclusions:**

* Maruti Suzuki, Hyundai, and Mahindra are the dominant players in the Indian car market.
* SUVs and sedans are the most popular body types.
* Petrol is the preferred fuel type in India.
* There is a strong relationship between fuel tank capacity and ex-showroom price.
* More affordable cars tend to have lower seating capacity.
* Maruti Suzuki offers the best value for money in terms of affordability and fuel efficiency.
* Bugatti and Maruti Suzuki offer the highest fuel tank capacity and city mileage, respectively.
* Maruti Suzuki and Mahindra are the leaders in petrol and diesel-powered vehicles, respectively.

These findings can be used by car manufacturers, dealers, and consumers to make informed decisions about product development, marketing, and purchasing.

"""